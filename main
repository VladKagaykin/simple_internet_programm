#include <iostream>
#include <vector>
#include <boost/asio.hpp>

std::string get_external_ip() {
    try {
        boost::asio::io_service io_service;
        boost::asio::ip::tcp::resolver resolver(io_service);
        boost::asio::ip::tcp::resolver::query query("ifconfig.me", "80");
        boost::asio::ip::tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);

        boost::asio::ip::tcp::socket socket(io_service);
        boost::asio::connect(socket, endpoint_iterator);

        std::string request = "GET /ip HTTP/1.1\r\n"
                              "Host: ifconfig.me\r\n"
                              "Connection: close\r\n\r\n";
        boost::asio::write(socket, boost::asio::buffer(request));

        boost::asio::streambuf response;
        boost::asio::read_until(socket, response, "\r\n\r\n");
        boost::asio::read_until(socket, response, "\r\n");

        std::stringstream ss;
        ss << &response;
        std::string full_response = ss.str();

        size_t pos = full_response.find("\r\n\r\n");
        if(pos != std::string::npos) {
            std::string ip_address = full_response.substr(pos+4);
            return ip_address;
        }
    } catch (std::exception& e) {
        std::cerr << "Ошибка: " << e.what() << std::endl;
    }
    return "Не удалось получить внешний IP";
}

std::string host(){
    std::string hostname = boost::asio::ip::host_name();
    return hostname;
}

std::string ipv4(){
    boost::asio::ip::tcp::resolver resolver(io_service);
    boost::asio::ip::tcp::resolver::query query(host(), "");
    boost::asio::ip::tcp::resolver::iterator endpoints = resolver.resolve(query);
    
    for (; endpoints != boost::asio::ip::tcp::resolver::iterator(); ++endpoints) {
        const auto addr = endpoints->endpoint().address();
        if (addr.is_v4()){
            return addr.to_string();
        }
    }
}

std::string ipv6(){
    boost::asio::ip::tcp::resolver resolver(io_service);
    boost::asio::ip::tcp::resolver::query query(host(), "");
    boost::asio::ip::tcp::resolver::iterator endpoints = resolver.resolve(query);
    
    for (; endpoints != boost::asio::ip::tcp::resolver::iterator(); ++endpoints) {
        const auto addr = endpoints->endpoint().address();
        if (addr.is_v6()){
            return addr.to_string();
        }
    }
}

int ip() {
    try {
        boost::asio::io_service io_service;
        
        std::cout << "Имя хоста: " << host() << std::endl;

        std::cout << "Внутренние IP-адреса:\n";
        std::cout << "IPv4: " << ipv4() << std::endl;
        std::cout << "IPv6: " << ipv6() << std::endl;
        
        std::cout << "Ваш внешний IP-адрес: " << get_external_ip() << std::endl;

    } catch (std::exception& ex) {
        std::cerr << "Исключение: " << ex.what() << std::endl;
    }

    return 0;
}



void scan_local_network() {
    try {
        boost::asio::io_service io_service;
        std::vector<std::string> local_ips;
        std::string hostname = boost::asio::ip::host_name();
        boost::asio::ip::tcp::resolver resolver(io_service);
        boost::asio::ip::tcp::resolver::query query(hostname, "");
        boost::asio::ip::tcp::resolver::iterator endpoints = resolver.resolve(query);

        for (; endpoints != boost::asio::ip::tcp::resolver::iterator(); ++endpoints) {
            auto addr = endpoints->endpoint().address();
            if (addr.is_v4()) {
                local_ips.push_back(addr.to_string());
            }
        }

        if (local_ips.empty()) return;

        std::string base_ip = local_ips[0].substr(0, local_ips[0].rfind('.') + 1);
        std::cout << "\nСканирование локальной сети (" << base_ip << "X):\n";

        for (int i = 1; i < 255; ++i) {
            std::string target_ip = base_ip + std::to_string(i);
            boost::asio::ip::tcp::endpoint ep(
                boost::asio::ip::make_address_v4(target_ip), 80);

            // Проверка доступности
            boost::asio::ip::tcp::socket socket(io_service);
            boost::asio::deadline_timer timer(io_service);
            bool connected = false;

            socket.async_connect(ep, [&](auto) { connected = true; });
            timer.expires_from_now(boost::posix_time::milliseconds(500));
            timer.async_wait([&](auto) { socket.close(); });

            io_service.reset();
            io_service.run_one();

            if (connected) {
                try {
                    // Исправленный DNS-запрос
                    boost::asio::ip::tcp::resolver dns_resolver(io_service);
                    boost::asio::ip::tcp::resolver::query dns_query(
                        boost::asio::ip::tcp::v4(),
                        target_ip,
                        ""
                    );

                    auto it = dns_resolver.resolve(dns_query);
                    if(it != boost::asio::ip::tcp::resolver::iterator()) {
                        std::string hostname = it->host_name();
                        if(hostname != target_ip) {
                            std::cout << target_ip << " - " << hostname << '\n';
                        } else {
                            std::cout << target_ip << " - имя совпадает с IP\n";
                        }
                    }
                } catch (boost::system::system_error& e) {
                    std::cout << target_ip << " - ошибка DNS: " << e.what() << '\n';
                }
            }
        }
    } catch (...) {}
}

int help(){
    std::cout << "help - это меню(удивительно)" << std::endl;
    std::cout << "exit - выйти" << std::endl;
    std::cout << "host - имя хоста(локальное)" << std::endl;
    std::cout << "local - ищет все ip в локальной сети и пишет их имена(если есть)" << std::endl;
    std::cout << "ip - выводит конкретные сведенья об ip" << std::endl;
    std::cout << "external_ip - выводит только внешний ipv4" << std::endl;
    std::cout << "ipv4 - выводит только ipv4" << std::endl;
    std::cout << "ipv6 - выводит только ipv6" << std::endl;
}

int switch_function(){
    std::string user;
    while(user != "exit"){
        std::cin >> user;
        
        if(user == "host"){
            std::cout << host() << std::endl;
        }
        else if(user == "local"){
            scan_local_network();
        }
        else if(user == "ip"){
            std::cout << ip() << std::endl;
        }
        else if(user == "external_ip"){
            std::cout << get_external_ip() << std::endl;
        }
        else if(user == "ipv4"){
            std::cout << ipv4() << std::endl;
        }
        else if(user == "ipv6"){
            std::cout << ipv6() << std::endl;
        }
    }
}

int main() {
    switch_function();
    return 0;
}
